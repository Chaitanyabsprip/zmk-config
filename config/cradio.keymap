/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
         combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        
            combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        
                    combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        
                           combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        
        
           combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
        

        
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Y &kp C &kp L &kp M &kp K 						&kp Z &kp F  &kp U    &kp COMMA  &kp BKSP 
		&kp I &kp S &hm LALT R &hm LGUI T &kp G 			       	&kp P &hm RGUI N &hm RALT E &kp A &kp O
		&kp Q &kp V &kp W &kp D &kp J				        &kp B &kp H  &kp SLASH &kp DOT &kp X
          				&mt LC(LS(LALT)) SPC &sk LSHIFT  				&sk RCTRL &to 1
		>;
		};

       		left_layer {
		bindings = <
		&kp ESC  &kp ATSN   &kp LS(N3) &kp DLLR    &kp PRCT		&kp CRRT &kp AMPS &kp KMLT &kp SCLN &kp BKSP 
		&kp TAB    &kp KP_EQUAL    &kp LA(RBKT)      &kp LA(LS(RBKT))     &kp SQT 		&kp NON_US_BSLH &kp LS(LBRC)  &kp LS(RBRC) &kp PIPE  &kp ENTER
		&kp TILDE    &kp LA(N3) 	&kp LA(LBKT) &kp LA(LS(LBKT))  &kp DQT 	&kp LBRC &kp LPRN &kp RPRN &kp RBRC  &to 3 
					    &to 0  &sk LSHIFT  					&kp RALT &to 2 
		>;
		};
		
		right_layer {
		bindings = <
		&kp ESC  &kp C_PP &kp C_PREV  &kp C_NEXT  &kp LS(MINUS)    			&kp MINUS  &kp N7 &kp N8 &kp N9 &trans
		&kp TAB  &trans   &kp C_VOL_DOWN  &kp C_VOL_UP  &kp LS(EQUAL) 			&kp EQUAL &kp N4  &kp N5  &kp N6   &kp ENTER
		&trans  &trans &trans &trans &kp DOT    			&kp N0 &kp N1 &kp N2 &kp N3  &trans 
					  &to 0 &kp LGUI  				&kp RALT  &to 2 
		>;
		};	
		
		tri_layer {
		bindings = <
		&kp NUM_1  &mwh SCROLL_LEFT    &mmv MOVE_UP    &mwh SCROLL_RIGHT    &kp NUM_5 			&trans &trans   &trans   &trans  &trans
		&kp F1 &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &kp F5  						&kp LEFT &kp DOWN  &kp UP &kp RIGHT &kp ENTER 
		&bt BT_CLR  &bt BT_NXT &bt BT_PRV &kp F6 &kp F7   				&trans &kp PG_DN  &kp K_VOL_DN  &trans &trans   
					 &to 0 &trans  					&kp RALT &to 1 
		>;
		};	
        
	};
};
